"name" : "bwq-suspension-of-monitoring"
"type" : "Composite"
requiredColumns : 
   - nirs_ref
   - situation_description
#   - incident_start_date
#   - incident_start_time
#   - incident_end_date
#   - incident_end_time
#   - inc_id
   - as_id
   - date_time_stamp
   - bw_season
   - start_date
   - start_time
   - expected_end_date
   - end_date
   - end_time
   - region
   - bathing_water
   - bw_ref
   - additional_comments

required:   
#   - nirs_ref
   - situation_description
#   - incident_start_date
#   - incident_start_time
#   - incident_end_date
#   - incident_end_time
#   - inc_id
#   - as_id
   - date_time_stamp
#   - bw_season
#   - start_date
#   - start_time
#   - expected_end_date
#   - end_date
#   - end_time
#   - region
#   - bathing_water
#   - bw_ref
#   - additional_comments

"bind" :
#####################################################################################################################
# URI and slugs
#####################################################################################################################
   - "source_base"           : "http://environment.data.gov.uk/sources/bwq"
     "data_base"             : "http://environment.data.gov.uk/data/bathing-water-quality"
     "body_slug"             : "eaew"
     "body_org"              : "http://reference.data.gov.uk/id/public-body/environment-agency"

#####################################################################################################################
# Codes and Notations
#####################################################################################################################
     "bwspid"                : "{empty(bw_ref)? null : bw_ref.format('%05d')}"

   - "bw"                    : "<{empty(bwspid) ? null : bwspid.map('bwq-sp-to-bw')}>"
     "bwLabel"               : "{empty(bwspid) ? null : bwspid.map('bwq-sp-to-bw','label',true)}"
     "somDataset"            : "<{data_base}/suspension>"
     "bodySomDataset"        : "<{data_base}/{body_slug}/suspension>"
     "incrementalSomDataset" : "<{data_base}/{body_slug}/suspension/dataset-increment/{$filebasename}>"

#####################################################################################################################
# Date and time literals
     "pubDateTime"           : "{$exectime.asDate('xsd:dateTime').toWholeSeconds().toLocalTime()}"
#####################################################################################################################
# There must be an easier way than the following to make an XSD data out of the 'dubious' field content if present...     
#####################################################################################################################       
     "l_expectedEndOfSuspension" : "{empty(expected_end_date) 
                                        ? null : 
                                          expected_end_date.asDate('dd/MM/yyyy|dd-MM-yyyy|yyyy-MM-dd|yyyy/MM/dd|dd/MM/yyyy HH:mm:ss|dd-MM-yyyy HH:mm:ss|yyyy-MM-dd HH:mm:ss|yyyy/MM/dd HH:mm:ss|dd/MM/yyyy HH:mm|dd-MM-yyyy HH:mm|yyyy-MM-dd HH:mm|yyyy/MM/dd HH:mm','xsd:dateTime')
                                          .format('yyyy-MM-dd')
                                          .asDate('xsd:date')
                                     }"
     "l_recordDateTime"      : "{date_time_stamp.asDate('dd/MM/yyyy HH:mm:ss|dd-MM-yyyy HH:mm:ss|yyyy-MM-dd HH:mm:ss|yyyy/MM/dd HH:mm:ss|dd/MM/yyyy HH:mm|dd-MM-yyyy HH:mm|yyyy-MM-dd HH:mm|yyyy/MM/dd HH:mm','xsd:dateTime')}"

#####################################################################################################################
# Helper functions.                 
#####################################################################################################################
     "ns"                    : "{= asResource($$).replaceAll('#$','') }"
#####################################################################################################################
# The functions extract date and time from the 'dubiously' presented start and end date and time fields.
#
# extractTime is potentially fragile because it relies on being able to instantiate an xsd:dateTime without date components
# in the case of _time field actually being just that (as opposed to being pre-pended with a bogus date).
#
# Incidentally, at the time of writing .asDate('xsd:time').format('HH:mm:ss) doesn't work on 'xsd:time' literals.
# SKW 2014-10-07
#####################################################################################################################
     "extractDate"           : "{= empty($$) ? null : $$.asDate('dd/MM/yyyy|dd-MM-yyyy|yyyy-MM-dd|yyyy/MM/dd|dd/MM/yyyy HH:mm:ss|dd-MM-yyyy HH:mm:ss|yyyy-MM-dd HH:mm:ss|yyyy/MM/dd HH:mm:ss|dd/MM/yyyy HH:mm|dd-MM-yyyy HH:mm|yyyy-MM-dd HH:mm|yyyy/MM/dd HH:mm','xsd:dateTime').format('yyyy-MM-dd')}"
     "extractTime"           : "{= empty($$) ? null : $$.asDate('HH:mm:ss|dd/MM/yyyy HH:mm:ss|dd-MM-yyyy HH:mm:ss|yyyy-MM-dd HH:mm:ss|yyyy/MM/dd HH:mm:ss|HH:mm|dd/MM/yyyy HH:mm|dd-MM-yyyy HH:mm|yyyy-MM-dd HH:mm|yyyy/MM/dd HH:mm','xsd:dateTime').format('HH:mm:ss')}"

   # Extract and check suspension and incident start/end dates/times.  
   - "s_startDate"           : "{extractDate.apply(start_date)}"
     "s_startTime"           : "{extractTime.apply(start_time)}"
     "s_endDate"             : "{extractDate.apply(end_date)}"
     "s_endTime"             : "{extractTime.apply(end_time)}"

     "s_incStartDate"        : "{extractDate.apply(incident_start_date)}"
     "s_incStartTime"        : "{extractTime.apply(incident_start_time)}"
     "s_incEndDate"          : "{extractDate.apply(incident_end_date)}"
     "s_incEndTime"          : "{extractTime.apply(incident_end_time)}"

     "pubDateTimeSlug"       : "{pubDateTime.format('yyyyMMdd-HHmmss')}"

   # Make RDF literals (lexical forms) for start/end dateTimes.
   - "l_startDateTime"       : "{empty(s_startDate)    || empty(s_startTime)    ? null : s_startDate.append('T').append(s_startTime).asDate('xsd:dateTime')}"
     "l_endDateTime"         : "{empty(s_endDate)      || empty(s_endTime)      ? null : s_endDate.append('T').append(s_endTime).asDate('xsd:dateTime')}"
     "l_incStartDateTime"    : "{empty(s_incStartDate) || empty(s_incStartTime) ? null : s_incStartDate.append('T').append(s_incStartTime).asDate('xsd:dateTime')}"
     "l_incEndDateTime"      : "{empty(s_incEndDate)   || empty(s_incEndTime)   ? null : s_incEndDate.append('T').append(s_incEndTime).asDate('xsd:dateTime')}"

   - r_som                   : "{data_base}/suspension/point/{bwspid}/date/{empty(l_startDateTime)? null : l_startDateTime.format('yyyyMMdd')}/time/{l_startDateTime.format('HHmmss')}/recordDateTime/{l_recordDateTime.format('yyyyMMddHHmmss')}"
     r_incident              : "{data_base}/pollution-incident/{empty(inc_id) ? null : inc_id.toCleanSegment()}/recordDateTime/{l_recordDateTime.format('yyyyMMddHHmmss')}"

   - r_incidentType          : "{empty(situation_description) ? null : situation_description.map('bwq-incident-type')}"

############################################################################################################
# Temporary Map source for mapping sampling-point codes to bathing water URI
############################################################################################################
# @@TODO 5: Possibly replace with some LDS-BWQ infrastructure map (several transforms will need it).

"sources" :
 ###############################################################################
 # Source for testing only, replace in live service
 ###############################################################################
#   - "name"        : "bwq-sp-to-bw"
#     "sourceType"  : "RDFSparql"
#     "source"      : "data/output/sites.ttl"
#     "query"       :
#          "SELECT ?key ?value ?eubwid ?label ?district ?gss
#           WHERE
#           {
#             []      a                   def-sp:SamplingPoint; 
#                     skos:notation       ?key;
#                     def-bw:bathingWater ?value .
#                 
#             ?value  skos:notation       ?eubwidT ;
#                     skos:prefLabel      ?label ;
#                     onsadmingeo:district ?district .
#                     
#             ?district 
#                     admingeo:gssCode ?gss .
#             BIND(str(?eubwidT) AS ?eubwid)
#             FILTER( lang(?label) = 'en' )
#           }"

#   - name         : ea-region
#     sourceType   : CSV
#     source       : transform/ea-region.csv
#     key          : code
#     value        : region

   - name         : bwq-incident-type
     sourceType   : RDFSparql
     source       : transform/incident-type.ttl
     query        : 
         "SELECT ?key ?value WHERE {
             { ?value rdfs:label ?key }
             UNION
             { ?value skos:notation ?key }
          }
         "

############################################################################################################
templates :  
   - bwq-som
   - bwq-incident

oneOffs :
############################################################################################################
# Link SOM Dataset to top level BWQ dataset
############################################################################################################
   - name                               : "bwq-som-bathing-water-quality-dataset"
     "@id"                              : "<{data_base}>"
     "<void:subset>"                    : "<{somDataset}>"
############################################################################################################
# Link per body suspension dataset as subset of top level suspensions dataset
############################################################################################################
   - "name"                             : "bwq-som-suspensions-dataset"
     "@id"                              : "<{somDataset}>"
     "<rdf:type> "                      : "<void:Dataset>"
     "<rdfs:label>"                     : "Bathing Water Quality Suspension Of Monitoring Dataset@en"
     "<dct:description>"                : "Top level dataset recording suspensions of scheduled monitoring due to abnormal situations by monitoring bodies in the UK.@en"
     "<dct:license>"                    : "<http://reference.data.gov.uk/id/open-government-licence>"
     "<void:uriRegexPattern>"           : "http://environment.data.gov.uk/data/bathing-water-quality/suspension/(.*)"
     "<void:subset>"                    : "<{bodySomDataset}>"
     "<void:vocabulary>" :
        - "<def-bwq:>"
        - "<def-bw:>"
        - "<def-som:>"
        - "<def-sp:>"
        - "<dgu:>"
        - "<skos:>"
############################################################################################################
# Link incremental suspension dataset to per body suspension dataset
############################################################################################################
   - "name"                             : "bwq-som-body-suspensions-dataset"
     "@id"                              : "<{bodySomDataset}>"
     "<rdf:type> "                      : "<void:Dataset>"
     "<rdfs:label>"                     : "Bathing Water Quality Suspension Of Monitoring Dataset - ({body_slug})@en"
     "<dct:description>"                : "Dataset recording suspensions of scheduled monitoring due to abnormal situations by the monitoring body - ({body_slug})@en"
     "<dct:modified>"                   : "{$exectime.toWholeSeconds().asDate('xsd:dateTime')}"
     "<dct:license>"                    : "<http://reference.data.gov.uk/id/open-government-licence>"
     "<dct:publisher>"                  : "<{body_org}>"
     "<void:uriRegexPattern>"           : "http://environment.data.gov.uk/data/bathing-water-quality/suspension/(.*)"
     "<void:vocabulary>" : 
        - "<def-bwq:>"
        - "<def-bw:>"
        - "<def-som:>"
        - "<def-sp:>"
        - "<dgu:>"
        - "<skos:>"
     "<void:subset>"                    : "<{incrementalSomDataset}>"
############################################################################################################
# Incremental suspension dataset details
############################################################################################################
   - "name"                             : "bwq-som-incremental-suspensions-dataset"
     "@id"                              : "<{incrementalSomDataset}>" 
     "<rdf:type>"                       : "<void:Dataset>"
     "<rdfs:label>"                     : "Bathing Water Quality - suspension of monitoring dataset {$exectime.toWholeSeconds()}@en"
     "<dct:description>"                : "Baseline or incremental suspension of monitoring dataset for a single monitoring body - ({$exectime.toWholeSeconds()}).@en"
     "<dct:modified>"                   : "{$exectime.toWholeSeconds()}"
     "<dct:license>"                    : "<http://reference.data.gov.uk/id/open-government-licence>"
     "<dct:publisher>"                  : "<{body_org}>"
     # Added dct:source to align with practice with other dataset subsets
     "<dct:source>"                     : "<{source_base}/{body_slug}/input/{$filename}>"
     "<void:vocabulary>" : 
        - "<def-bwq:>"
        - "<def-bw:>"
        - "<def-som:>"
        - "<def-sp:>"
        - "<dgu:>"
        - "<skos:>"
     "<void:dataDump>"                  : "<{source_base}/{body_slug}/output/{$filebasename}.ttl>"
     "<void:sparqlEndpoint>"            : "<http://environment.data.gov.uk/sparql/bwq/query>"

referenced : 
############################################################################################################
# Suspension of Monitoring record.
############################################################################################################
   - name     : bwq-som
     type     : Composite
     onlyIf   : "{!empty(l_startDateTime) && !empty(r_som) }"
     templates : bwq-som-guarded
     
   - name                               :  "bwq-som-guarded"
     "@id"                               :  "<{r_som}>"
     "<rdf:type>"                        :  "<def-som:SuspensionOfMonitoring>"
     "<rdfs:label>"                      : "{as_id} - {bwLabel}@en"
     "<def-som:notation>"                : "{as_id.datatype('def-som:somID')}"
     "<skos:notation>"                 : [ "{as_id.datatype('def-som:somID')}","{as_id}" ]
     "<dct:source>"                      : "<{source_base}/{body_slug}/input/{$filename}#row={value($row.number+1).format('%06d')}>"
     "<def-bw:bathingWater>"             : "<{bw}>"
     "<def-sp:samplingPoint>"            : "<so-sp:{bwspid}>"
     "<def-bwq:sampleYear>"              : "<{bw_season.asDate('xsd:gYear').referenceTime()}>"
     "<def-bw:regionalOrganization>"     : "<{region.map('ea-region')}>"
     "<dgu:uriSet>"                      : "<{incrementalSomDataset}>"
 # Date/Time fields
     "<def-som:startOfSuspension>"       : "{l_startDateTime}"
     "<def-som:endOfSuspension>"         : "{l_endDateTime}"
     "<def-som:expectedEndOfSuspension>" : "{l_expectedEndOfSuspension}"
     "<def-som:recordDateTime>"          : "{l_recordDateTime}"
# Narrative fields
     "<dct:description>"                 : "{situation_description}@en"
     "<rdfs:comment>"                    : "{additional_comments}@en"
     "<def-som:nirsRef>      "           : "{empty(nirs_ref) ? null : nirs_ref.asString()}"
     "<def-som:pollutionIncident>"       : "<{r_incident}>"
     
############################################################################################################
# Pollution Incident record.
############################################################################################################
   - name     : bwq-incident
     type     : Composite
     onlyIf   : "{!empty(l_incStartDateTime) && !empty(r_incident)}"
     templates : bwq-incident-guarded
     
   - name     : bwq-incident-guarded
     "@id"                               : "<{r_incident}>"
     "<rdf:type>"                        : "<def-som:PollutionIncident>"
     "<rdfs:label>"                      : "Pollution Incident - {inc_id}"
     "<dct:source>"                      : "<{source_base}/{body_slug}/input/{$filename}#row={value($row.number+1).format('%06d')}>"
     "<def-bw:bathingWater>"             : "<{bw}>"
     "<def-sp:samplingPoint>"            : "<so-sp:{bwspid}>"
     "<def-som:suspensionOfMonitoring>"  : "<{r_som}>"
     "<def-bwq:sampleYear>"              : "<{bw_season.asDate('xsd:gYear').referenceTime()}>"
     "<def-som:startOfIncident>"         : "{l_incStartDateTime}"
     "<def-som:endOfIncident>"           : "{l_incEndDateTime}"
     "<def-som:expectedEndOfIncident>"   : "{l_expectedEndOfSuspension}"
     "<def-som:incidentNotation>"        : "{inc_id.datatype('def-som:piID')}"
     "<skos:notation>"                   : [ "{inc_id.datatype('def-som:piID')}","{inc_id}" ]
     "<def-som:recordDateTime>"          : "{l_recordDateTime}"
     "<def-som:nirsRef>      "           : "{empty(nirs_ref) ? null : nirs_ref.asString()}"     
     "<def-som:incidentType>"            : "{r_incidentType}"
     